(defpackage :tcl.compare
  (:use :tcl #:tcl.ord)
  (:export
    #:compare #:lt #:gt #:lte #:gte #:compare-p
    )
  )
(in-package :tcl.compare)

(define-type-class(compare a)((ord a))
  ((compare(a a)(member :eq :lt :gt))
   (lt(a a)boolean)
   (gt(a a)boolean)
   (lte(a a)boolean)
   (gte(a a)boolean))
  (:default compare (x y)
	    `(compare (ord ,x)(ord ,y)))
  (:default lt (x y)
	    `(< (ord ,x)(ord ,y)))
  (:default gt (x y)
	    `(> (ord ,x)(ord ,y)))
  (:default lte (x y)
	    `(<= (ord ,x)(ord ,y)))
  (:default gte (x y)
	    `(>= (ord ,x)(ord ,y))))

(definstance(compare number)
  ((compare(a b)
     `(let((a ,a)
	   (b ,b))
	(cond
	  ((= a b):eq)
	  ((< a b):lt)
	  (t :gt))))))

(definstance(compare string)
  ((lt(a b)
     `(string< ,a ,b))
   (lte(a b)
     `(string<= ,a ,b))
   (gt(a b)
     `(string> ,a ,b))
   (gte(a b)
     `(string>= ,a ,b))
   (compare(a b)
     `(cond
	((string= ,a ,b):eq)
	((string< ,a ,b):lt)
	(t :gt)))))

(definstance(compare symbol)
  ((lt(a b)
     `(string< ,a ,b))
   (lte(a b)
     `(string<= ,a ,b))
   (gt(a b)
     `(string> ,a ,b))
   (gte(a b)
     `(string>= ,a ,b))
   (compare(a b)
     `(cond
	((string= ,a ,b):eq)
	((string< ,a ,b):lt)
	(t :gt)))))
