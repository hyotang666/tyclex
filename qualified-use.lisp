(in-package #:vs-haskell)

(defmacro qualified-use(package &key as)
  (assert as()"Missing :AS keyword parameter.")
  `(eval-when(:compile-toplevel :load-toplevel :execute)
     ,@(loop :for symbol :being :each :external-symbol :of package
             :for new = (intern(format nil "~A.~A"as symbol))
             :collect `(define-symbol-macro ,new ,symbol)
             :when (macro-function symbol)
             :do (setf (macro-function new)(macro-function symbol))
             :when (and (not(macro-function symbol))
                        (fboundp symbol))
             :do (setf (symbol-function new)(symbol-function symbol))
             :when (ignore-errors(fdefinition`(setf ,symbol)))
             :do (setf (fdefinition`(setf ,new))(fdefinition`(setf ,symbol))))))
